plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'com.diffplug.spotless' version '6.23.3' // Spotless 플러그인
}

group = 'briefing.info'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // eureka client 설정
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // querydsl
    // == 스프링 부트 3.0 이상 ==
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.3.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'mysql:mysql-connector-java' // 추가 작성

    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2022.0.3")
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
//    runtimeOnly 'org.postgresql:postgresql'
//    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def querydslSrcDir = 'src/main/generated'

clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}


/*
    compileJava 태스크가 실행되기 전에 spotlessApply 태스크가 먼저 실행되도록 구성
    개발자가 별도로 코드 포맷팅을 신경 쓸 필요 없이, 코드가 항상 일관된 스타일을 유지하도록 설정
 */
tasks.named('compileJava') {
    dependsOn 'spotlessApply'
}

jar {
    enabled = false
}

spotless {
    java {
        // Google Java 포맷 적용
        /*
            googleJavaFormat() : 탭은 2개의 공백
            googleJavaFormat().aosp() : 탭은 4개의 공백
            [참고] https://github.com/google/google-java-format/issues/525
         */
        googleJavaFormat().aosp()
        // 아래 순서로 import문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}